
#include <bits/stdc++.h>
using namespace std;


    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        if(grid.empty()) return 0;
        int totalorange =0; int count=0; int timeof =0;
        
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,int>>q;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] ==2){
                    q.push({i,j});
                }
                if(grid[i][j] != 0){
                    totalorange++;
                }
                    
            }
        }
        
        int dx[4] = {0,0,1,-1};
        int dy[4] = {1,-1,0,0};
        
        while(!q.empty()){
            int size = q.size();
            count+=size;
            while(size--){
                pair<int,int>p = q.front();
                int x = p.first;
                int y = p.second;
                q.pop();
                for(int i=0; i<4; i++){
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    if(nx<0 || nx>=n || ny<0 || ny>=m || grid[nx][ny] != 1) continue;
                    grid[nx][ny] =2;
                    q.push({nx,ny});
                }
            }
            
            if(!q.empty()) timeof++;
        }
        
        return totalorange == count? timeof : -1;
    }


// { Driver Code Starts.
int main(){
	
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		
		int ans = orangesRotting(grid);
		cout <<ans<<endl;
	}
	
