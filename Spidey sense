// { Driver Code Starts

#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{

    public:
    
    bool isValid(int x, int y, vector<vector<int>>&visited,vector<vector<int>>&v, vector<vector<char> >& matrix ){
        if(x<0 || x>= matrix.size() || y<0 || y>= matrix[0].size() || matrix[x][y] == 'W' || matrix[x][y] == 'B' || visited[x][y] == 1){
            return false;
        }
        return true;
    }
    vector<vector<int> > findDistance(vector<vector<char> >& matrix, int M, int N) 
    { 
        // Your code goes here
        //M*N size matrix
        int m = M;
        int n = N;
        vector<vector<int>>v(m, vector<int>(n, 1e9));
        vector<vector<int>>visited(m,vector<int>(n,0));
        
        queue<pair<int,int>>q;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j] == 'B'){
                    v[i][j] = 0;
                    visited[i][j] = 1;
                    q.push({i,j});
                }
                
                else if(matrix[i][j] == 'W'){
                    v[i][j] = -1;
                }
            }
        }
        
        int dx[4] = {-1,0,1,0};
        int dy[4] = {0,1,0,-1};
        
        while(!q.empty()){
            pair<int,int>p = q.front();
            q.pop();
            int x = p.first;
            int y = p.second;
            
            for(int k=0; k<4; k++){
                int nx = x + dx[k];
                int ny = y + dy[k];
                
                if(isValid(nx,ny,visited,v,matrix)){
                    v[nx][ny] = min(v[nx][ny], 1 + v[x][y]);
                    q.push({nx, ny});
                    visited[nx][ny] = 1;
                }
            }
        }
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(v[i][j] == 1e9){
                    v[i][j] = -1;
                }
            }
        }
        return v;
        
        
    } 
};

// { Driver Code Starts.


int main()
{

    int t;
    cin >> t;
    while(t--)
    {
    	int M,N;
        cin>>M;
        cin>>N;

        vector<vector<char> > matrix(M);
        for(int i=0; i<M; ++i)
        {
            matrix[i].resize(N);
            for (int j = 0; j < N; ++j)
                cin>>matrix[i][j];
        }

        vector<vector<int> >result;
        Solution obj;
        result = obj.findDistance(matrix, M,N); 
        for(int i=0; i<M; ++i)
        {
            for (int j = 0; j < N; ++j)
                cout<<result[i][j]<<" ";
            cout<<"\n";
        }
    }

    return 0;
}  // } Driver Code Ends
