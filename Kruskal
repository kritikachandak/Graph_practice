
#include <bits/stdc++.h>
using namespace std;

struct node{
    int u;
    int v;
    int wt;
    node(int first, int second, int weight){
        u = first;
        v = second;
        wt = weight;
    }
};

//class Solution{
    //public:
    
    static bool comparator(node &a, node &b){
        return a.wt<b.wt;
    }
    
    int find(int u, vector<int>&parent){
        if(parent[u] == u) return u;
        else
          return parent[u] = find(parent[u], parent);
    }
    
    void union_find(int u, int v, vector<int>&parent, vector<int>&rank){
        u = find(u, parent);
        v = find(v, parent);
        if(rank[u]<rank[v]){
            parent[u] =v;
        }
        else if(rank[v]<rank[u]){
            parent[v] =u;
        }
        else
           parent[u] =v;
           rank[v]++;
    }
    
    
     
     





int main() {
    int V,m;
    cin>>V>>m;
	vector<node>edges;
    for(int i = 0;i<m;i++) {
	    int u, v, wt;
	    cin >> u >> v >> wt; 
	    edges.push_back(node(u, v, wt)); 
	}
     
     vector<int>parent(V);
     for(int i=0; i<V; i++){
         parent[i] =i;
     }
     vector<int>rank(V,0);
     int cost =0;
     vector<pair<int,int>>mst;
     
     sort(edges.begin(), edges.end(), comparator);
     for(auto it: edges){
         if(find(it.u, parent) != find(it.v, parent)){
             cost += it.wt;
             mst.push_back({it.u, it.v});
             union_find(it.u, it.v, parent, rank);
         }
         
     }
     cout<<cost;
}
