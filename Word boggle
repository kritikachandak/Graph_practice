// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution {
public:

   bool dfs(vector<vector<char> >& board, string word, vector<vector<bool> >& visited, int x, int y, int idx){
       if(idx == word.length()) return true;
       
       if(x>=0 && x<board.size() && y>=0 && y<board[0].size() && visited[x][y] == false && board[x][y] == word[idx]){
           visited[x][y] = true;
           
           if(dfs(board, word, visited, x-1 , y-1, idx+1) || dfs(board, word, visited, x-1 , y, idx+1) || dfs(board, word, visited, x-1 , y+1, idx+1)|| dfs(board, word, visited, x , y+1, idx+1) || dfs(board, word, visited, x+1 , y+1, idx+1) ||dfs(board, word, visited, x+1 , y, idx+1)|| dfs(board, word, visited, x+1 , y-1, idx+1) || dfs(board, word, visited, x , y-1, idx+1)){
               return true;
           }
           visited[x][y] = false;
       }
       return false;
   }

   bool exist(vector<vector<char> >& board, string word){
       int n = board.size();
       int m = board[0].size();
       vector<vector<bool> >visited(n, vector<bool>(m, false));
       
       int idx = 0;
       for(int i=0; i<n; i++){
           for(int j=0; j<m; j++){
               if(board[i][j] == word[idx]){
                   if(dfs(board, word, visited, i , j, idx) == true)
                      return true;
               }
           }
       }
       return false;
   }
	vector<string> wordBoggle(vector<vector<char> >& board, vector<string>& dictionary) {
	    // Code here
	    vector<string>res;
	    for(int i=0; i<dictionary.size(); i++){
	        string word = dictionary[i];
	        if(exist(board,word)==true) res.push_back(word);
	    }
	    return res;
	}
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<string> dictionary;
        for (int i = 0; i < N; ++i) {
            string s;
            cin >> s;
            dictionary.push_back(s);
        }
        
        int R, C;
        cin >> R >> C;
        vector<vector<char> > board(R);
        for (int i = 0; i < R; i++) {
            board[i].resize(C);
            for (int j = 0; j < C; j++) cin >> board[i][j];
        }
        Solution obj;
        vector<string> output = obj.wordBoggle(board, dictionary);
        if (output.size() == 0)
            cout << "-1";
        else {
            sort(output.begin(), output.end());
            for (int i = 0; i < output.size(); i++) cout << output[i] << " ";
        }
        cout << endl;
    }
}
  // } Driver Code Ends
  
  
  
  
  //2nd approach
        #include<bits/stdc++.h>
      using namespace std;
      
      class Solution{
          
      public:
     int dx[8]={1,1,0,-1,-1,-1,0,1};
     int dy[8]={0,1,1,1,0,-1,-1,-1};
     bool dfs(vector<vector<char>>&board,string temp,vector<vector<bool>>&visited,int x,int y,int r,int c,int index){
            if(x<0||x>=r||y<0||y>=c||visited[x][y]==true||temp[index]!=board[x][y]){
                return false;
            }
            if(index==temp.length()-1){
                return true;
            }
            if(index>=temp.length()){
                return false;
            }
            visited[x][y]=true;
            for(int i=0;i<8;i++){
                int p=x+dx[i],q=y+dy[i];
                bool result = dfs(board,temp,visited,p,q,r,c,index+1);
                if(result){
                    return true;
                }
            }
            visited[x][y]=false;
            return false;
     }
    bool search(vector<vector<char>>&board,string word,int r,int c){
            vector<vector<bool>>visited (r,vector<bool>(c,false));
            for(int i=0;i<r;i++){
                for(int j=0;j<c;j++){
                    if(board[i][j]==word[0]){
                        if(dfs(board,word,visited,i,j,r,c,0)){
                            return true;
                        }
                    }
                }
            }
            return false;
            
    }
vector<string> wordBoggle(vector<vector<char> >& board, vector<string>& dictionary) {
    // Code here
    vector<string>ans;
    int r= board.size(),c=board[0].size();
    for(auto word:dictionary){
        if(search(board,word,r,c)){
            ans.push_back(word);
        }
    }
    return ans;
}
};

int main() {
	int n;
	cin>>n;
	vector<string>dictionary;
	for(int i=0; i<n; i++){
	    string s;
	    cin>>s;
	    dictionary.push_back(s);
	}
	
	int r,c;
	cin>>r>>c;
	vector<vector<char>>board(r);
	for(int i=0; i<r; i++){
	    board[i].resize(c);
	    for(int j=0; j<c; j++){
	        cin>>board[i][j];
	    }
	}
	
	Solution obj;
	vector<string>ans = obj.wordBoggle(board, dictionary);
	if(ans.size() == 0){
	    cout<<"-1";
	}
	sort(ans.begin(), ans.end());
	for(int i=0; i<ans.size(); i++){
	    cout<<ans[i]<<" ";
	}
	cout<<endl;
}
