//Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
 
	public:
	int numberOfCells(int n, int m, int r, int c, int u, int d, vector<vector<char>> &mat)
	{
		// Your code goes here
		
		if(mat[r][c] == '#'){
		    return 0;
		}
		
		queue<vector<int>>q;
		q.push({r,c,u,d});
		mat[r][c] = '1';
		
		while(!q.empty()){
		    auto it = q.front();
		    q.pop();
		    int x = it[0];
		    int y = it[1];
		    int ups = it[2];
		    int dwn = it[3];
		    
		    if(y-1>=0 && mat[x][y-1] == '.'){
		       mat[x][y-1] = '1';
		        q.push({x, y-1, ups,dwn});
		        
		    }
		    if(y+1<m && mat[x][y+1] == '.'){
		        mat[x][y+1] = '1';
		        q.push({x, y+1, ups, dwn});
		        
		    }
		    if(x-1>=0  && mat[x-1][y] == '.' && (ups-1)>=0){
		        mat[x-1][y] = '1';
		        q.push({x-1,y,ups-1,dwn});
		        
		    }
		    if(x+1<n  && mat[x+1][y] == '.' && (dwn-1)>=0){
		        mat[x+1][y] = '1';
		        q.push({x+1,y,ups,dwn-1});
		        
		    }
		    
		}
		
		int count =0;
		for(int i=0; i<n; i++){
		    for(int j=0; j<m; j++){
		        if(mat[i][j] == '1'){
		            count++;
		        }
		    }
		}
		
		return count;
	}

};

// { Driver Code Starts.

int main() 
{
   	
   	int t;
    cin >> t;

    while (t--)
    {
    	int n, m, r, c, u, d;
        cin >> n >> m >> r >> c >> u >> d;
        
        vector<vector<char>> mat(n, vector<char>(m, '.'));

        for(int i = 0; i < n; i++)
        {
        	for(int j = 0; j < m; j++)
        	{
        		cin >> mat[i][j];
        	}
        }

      

        Solution obj;
        cout << obj.numberOfCells(n, m, r, c, u, d, mat) << "\n";
    
    }

    return 0;
}


  // } Driver Code Ends
