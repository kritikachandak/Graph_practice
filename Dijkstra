
#include<bits/stdc++.h>
using namespace std;

int main(){
    int n,m,src;
    cin>>n>>m>>src;
    int u,v,wt;
    vector<pair<int,int>>adj[n];
    for(int i=0; i<n; i++){
        cin>>u>>v>>wt;
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
    }
    
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > pq;
    vector<int>disTo(n,INT_MAX);
    pq.push({0,src});
    disTo[src] =0;
    while(!pq.empty()){
        pair<int,int>p = pq.top();
        int dis = p.first;
        int prev = p.second;
        pq.pop();
        for(auto it: adj[prev]){
            int next = it.first;
            int nextdis = it.second;
            if(disTo[next]>disTo[prev] + nextdis){
               disTo[next] = disTo[prev] + nextdis;
               pq.push({disTo[next], next});
            }
        }
    }
    
    for(int i=0; i<n; i++){
        cout<<disTo[i]<<" ";
    }
    return 0;
}




//2nd approach
// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        int s = S;
        vector<int>disTo(V, INT_MAX);
        disTo[s] =0;
        priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > pq;
        pq.push({0,s});
        while(!pq.empty()){
            pair<int,int>p = pq.top();
            int dist = p.first;
            int node = p.second;
            pq.pop();
            for(auto it: adj[node]){
                int next = it[0];
                int nextdis = it[1];
                if(disTo[next] > disTo[node] + nextdis){
                    disTo[next] = disTo[node] + nextdis;
                    pq.push({disTo[next], next});
                }
            }
            
        }
        vector<int>ans;
        for(int i=0; i<disTo.size(); i++){
            ans.push_back(disTo[i]);
        }
        return ans;
    }
};


// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}

  // } Driver Code Ends
