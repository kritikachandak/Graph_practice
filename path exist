//1 is the source, 2 is the destination , 3 is the empty cell, 0 is the wall
//concept is jesi 1 milta hai will run dfs if that dfs gives true mtlb path exist
// check boundary conditions in dfs, check if grid[x][y] == 2 i.e. destination
// if it is valid and not destination then mark it visited 
// individually each direction mei check hoga if koi bhi ek direction true deta hai then path exist and the entire dfs will give true





// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution
{
    
    bool dfs(int i, int j, vector<vector<int>>&grid, int n, int m, vector<vector<int>>&visited){
        if(i<0 || i>=n || j<0 || j>=m || grid[i][j] == 0 || visited[i][j] ==true){
            return false;
        }
        if(grid[i][j] == 2){
            return true;
        }
        visited[i][j] = true;
        if(dfs(i-1, j, grid, n,m, visited) || dfs(i, j+1, grid, n, m, visited) || dfs(i+1, j, grid, n, m, visited) || dfs(i, j-1, grid, n, m, visited) ){
            return true;
        }
        return false;
    }
    public:
    //Function to find whether a path exists from the source to destination.
    bool is_Possible(vector<vector<int>>& grid) 
    {
        //code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>visited(n,vector<int>(m,0));
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1){
                    if(dfs(i,j,grid,n,m, visited))
                       return true;
                }
            }
        }
        return false;
        
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>grid(n, vector<int>(n, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		bool ans = obj.is_Possible(grid);
		cout << ((ans) ? "1\n" : "0\n");
	}
	return 0;
}  // } Driver Code Ends
