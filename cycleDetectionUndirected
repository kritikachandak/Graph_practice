// using DFS

#include <bits/stdc++.h>
using namespace std;

class Solution{
    
    bool dfs(int node, int parent, vector<bool>&visited, vector<int>adj[]){
        visited[node]=1;
        for(auto it: adj[node]){
            if(!visited[it]){
                if(dfs(it, node, visited, adj))
                   return true;
            }
            else if(it !=parent){
                return true;
            }
        }
        return false;
    }
    public:
    bool isCycle(int n, vector<int>adj[]){
        vector<bool>visited(n+1, false);
        for(int i=0; i<n; i++){
            if(!visited[i]){
                if(dfs(i, -1, visited, adj))
                  return true;
            }
        }
        return false;
    }
};

int main() {
	int n,m;
	cin>>n>>m;
	int u,v;
	vector<int>adj[n+1];
	for(int i=0; i<m; i++){
	    cin>>u>>v;
	    adj[u].push_back(v);
	    adj[v].push_back(u);
	}
	
	Solution obj;
	bool ans = obj.isCycle(n,adj);
	
	if(ans)
	      cout<<"1\n";
	else 
	       cout<<"2\n";
	
	
	
}
