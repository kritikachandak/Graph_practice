// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
    
    void dfs(int x, int y, vector<vector<char>>& grid, vector<vector<bool>>&visited){
        if(x<0 || x>=grid.size() ||y<0 || y>=grid[0].size() || grid[x][y]!='1' || visited[x][y] == true) return;
         
        visited[x][y] = true;
        
        int dx[8] = {0,0,-1,+1,-1,-1,+1,+1};
        int dy[8] = {1,-1,0,0,-1,+1,-1,+1};
        for(int k=0; k<8; k++){
            int nx = x + dx[k];
            int ny = y + dy[k];
            
            dfs(nx,ny,grid,visited);
        }
    }  
        
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int count =0;
        vector<vector<bool>>visited(grid.size(), vector<bool>(grid[0].size(),false));
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[0].size(); j++){
                if((visited[i][j] == false) && (grid[i][j]=='1')){
                    count++;
                    dfs(i,j, grid, visited);
                    //count++;
                }
            }
        }
        return count;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}  // } Driver Code Ends
