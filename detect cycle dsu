#include <bits/stdc++.h>
using namespace std;

class Solution{
    public:
    
    int find(int a, int parent[]){
        if(parent[a] == a) return a;
        return parent[a] = find(parent[a],parent);
    }
    
    bool union1( int a, int b, int parent[], int rank[]){
        int p1 = find(a, parent);
        int p2 = find(b,parent);
        
        if((p1 == p2) && a!=b){
            return true;
        }
        if(rank[p1] < rank[p2]) {
            parent[p1] = p2;
        }
        else if(rank[p2]<rank[p1]){
            parent[p2] = p1;
        }
        else {
            parent[p1] = p2;
            rank[p2]++;}
            
        return false;
        
    }
    int detectCycle(int n, vector<int>adj[]){
        int parent[n];
        int rank[n];
        for(int i=0; i<n; i++){
            parent[i] =i;
            rank[i] =0;
        }
        
        for(int i=0; i<n; i++){
            for(auto it: adj[i]){
                if(i<it && (union1(i,it,parent, rank) == true)){
                    return 1;
                }
            }
        }
        return 0;
    }
};

int main() {
	int n,m;
	cin>>n>>m;
	vector<int>adj[n];
	int u,v;
	for(int i=0; i<m; i++){
	    cin>>u>>v;
	    adj[u].push_back(v);
	    adj[v].push_back(u);
	}
	Solution obj;
	int ans = obj.detectCycle(n,adj);
	cout<<ans;
}
