#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution 
{
    public:
    
    bool isValid(int x, int y, int N, vector<vector<bool>>&visited){
        if(x<0 || x>=N || y<0 || y>=N || visited[x][y] == true){
            return false;
        }
        return true;
    }
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    int sx = KnightPos[0]-1;
	    int sy = KnightPos[1]-1;
	    int tx = TargetPos[0]-1;
	    int ty = TargetPos[1]-1;
	    
	    if(sx==tx && sy==ty) return 0;
	    int step =0;
	    vector<vector<bool>>visited(N,vector<bool>(N,false));
	    queue<pair<int,int>>q;
	    q.push({sx,sy});
	    visited[sx][sy]=true;
	    
	    int dx[8] = {1,1,-1,-1,2,-2,2,-2};
	    int dy[8] = {2,-2,2,-2,1,1,-1,-1};
	    
	    while(!q.empty()){
	        int size = q.size();
	        step++;
	        while(size--){
	        pair<int,int>p = q.front();
	        int x = p.first;
	        int y = p.second;
	        q.pop();
	        
	        for(int k=0; k<8; k++){
	            int nx = x + dx[k];
	            int ny = y + dy[k];
	            
	            if(nx==tx && ny == ty){
	                return step;
	            }
	            if(isValid(nx,ny,N,visited)){
	                q.push({nx,ny});
	                visited[nx][ny]=true;
	            }
	        }
	        
	    }
	    }
	    return -1;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends
